!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._errorList=e.errorList,this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent="",this._errorMessageElement.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return Array.from(this._inputElements).some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._form.reset(),this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}}class t{constructor(e,t,r,s,n,a,o){this._name=e.name,this._link=e.link,this._id=e._id,this._cardSelector=t,this._data=e,this._handleImageClick=r,this._handleDeleteButtonClick=a,this._handleLikeCard=s,this._handleUnlikeCard=n,this._currentUserId=o,this._cardElement=this._getTemplate()}_getTemplate(){const e=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);return this._likeButton=e.querySelector(".card__like-button"),this._deleteButton=e.querySelector(".card__delete-button"),this._cardImageEl=e.querySelector(".card__image"),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButtonClick(this._id)})),e}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}_handleLikeButton(){(this._likeButton.classList.contains("card__like-button-active")?this._handleUnlikeCard:this._handleLikeCard)(this._id).then((()=>{this._likeButton.classList.toggle("card__like-button-active")})).catch((e=>{console.error(`Error handling like action: ${e}`)}))}getView(){return this._element=this._cardElement,this._element.setAttribute("data-id",this._id),this._element.querySelector(".card__title").textContent=this._name,this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._setEventListeners(),this._element}}class r{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t),this._closeButton=this._modalElement.querySelector(".modal__close"),this._handleEscapeKey=this._handleEscapeKey.bind(this)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeKey)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeKey)}_handleEscapeKey(e){"Escape"===e.key&&this.close()}_setEventListeners(){this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()})),this._closeButton.addEventListener("click",(()=>{this.close()}))}}class s extends r{constructor(e,t){super({modalSelector:e}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputElements=this._modalForm.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super._setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const n=document.querySelectorAll(".modal__form"),a=document.querySelector("#profile__edit-button-js"),o=(document.forms["profile-edit-form"],document.querySelector("#profile__add-button-js")),i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",errorList:"modal__error"},l=document.querySelector("[name='name']"),d=document.querySelector("[name='about']"),c=document.querySelector(".profile__avatar"),h=document.querySelector("#avatar-edit-modal .modal__button"),_=document.querySelector("#profile-edit-modal .modal__button"),u=document.querySelector("#add-button-modal .modal__button"),m=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfoAndCards(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}createCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a44aa497-1b5c-4737-a030-aa953cdc7c47","Content-Type":"application/json"}}),E=new class{constructor(e,t){let{items:r,renderer:s}=e;this._renderItems=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.reverse().forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}getItem(e){return this._renderItems.find((t=>t.id===e))}}({items:[],renderer:function(e){const t=y(e);E.addItem(t)}},".cards__list"),p=new s("#profile-edit-modal",(function(e){_.textContent="Saving...";const t={name:e.name,about:e.about};m.updateUserInfo(t).then((e=>{b.setUserInfo(e),p.close()})).catch((e=>{console.error("Error updating user information:",e)})).finally((()=>{_.textContent="Save"}))}));p.setEventListeners();const v=new s("#add-button-modal",(function(e){u.textContent="Saving...";const t={name:e.title,link:e.image};m.createCard(t).then((e=>{E.addItem(y(e)),v.close()})).catch((e=>{console.error("Error creating card:",e)})).finally((()=>{u.textContent="Create"}))}));v.setEventListeners();const f=new class extends r{constructor(e){super({modalSelector:e}),this._modalImage=this._modalElement.querySelector(".modal__image"),this._modalImageCaption=this._modalElement.querySelector(".modal__caption")}open(e){this._modalImage.src=e.link,this._modalImage.alt=e.name,this._modalImageCaption.textContent=e.name,super.open()}setEventListeners(){super._setEventListeners(),this._modalImage.addEventListener("submit",(e=>{e.preventDefault()}))}}("#preview-image-modal");f.setEventListeners();const g=new class extends r{constructor(e,t){super({modalSelector:e}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._inputElement=this._modalForm.querySelector("#avatar-image-input"),this._errorElement=this._modalForm.querySelector("#avatar-image-input-error"),this._handleAvatarImageSubmit=t}setEventListeners(){super._setEventListeners(),document.querySelector(".profile__avatar-button").addEventListener("click",(()=>{console.log("Avatar button clicked"),this.open()})),this._modalForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._inputElement.value.trim();t?(this._handleAvatarImageSubmit({avatar:t}),this.close()):console.error("Avatar URL is required.")}))}}("#avatar-edit-modal",(function(e){h&&(h.textContent="Saving...");const t=e.avatar;t?m.updateUserAvatar(t).then((e=>{console.log("User avatar updated successfully:",e),b.setUserInfo({avatar:t}),g.close()})).catch((e=>{console.error("Error updating user avatar:",e)})).finally((()=>{h.textContent="Save"})):console.error("Avatar URL is required.")}));g.setEventListeners();const S=new class extends r{constructor(e,t){super({modalSelector:e}),this._handleDeleteCardSubmit=t,this._confirmButton=this._modalElement.querySelector(".modal__button")}setEventListeners(){super._setEventListeners(),this._confirmButton.addEventListener("click",(()=>{const e=this._modalElement.dataset.cardId;this._handleDeleteCardSubmit(e),this.close()}))}open(e){this._modalElement.dataset.cardId=e,super.open()}}("#delete-card-modal",(function(e){m.deleteCard(e).then((()=>{const t=document.querySelector(`[data-id='${e}']`);t&&t.remove()})).catch((e=>{console.error("Error deleting card:",e)}))}));S.setEventListeners();const b=new class{constructor(e){let{nameElementSelector:t,aboutElementSelector:r,avatarImageSelector:s}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(r),this._avatarImage=document.querySelector(s),this._avatarImage||console.error("Avatar image element not found.")}getUserInfo(){return{name:this._nameElement?.textContent||"",about:this._aboutElement?.textContent||""}}setUserInfo(e){let{name:t,about:r,avatar:s}=e;t&&(this._nameElement.textContent=t),r&&(this._aboutElement.textContent=r),s&&this._avatarImage&&(this._avatarImage.src=s)}getUserId(){return this._userId}}({nameElementSelector:".profile__title",aboutElementSelector:".profile__description",avatarImageSelector:".profile__avatar"});function y(e){return new t(e,"#card-template",(()=>{f.open(e)}),I,L,C,b.getUserId()).getView()}function I(e){return m.likeCard(e).catch((e=>{throw console.error(`Error liking card: ${e}`),e}))}function L(e){return m.unlikeCard(e).catch((e=>{throw console.error(`Error unliking card: ${e}`),e}))}function C(e){S.open(e)}document.addEventListener("DOMContentLoaded",(()=>{m.getUserInfoAndCards().then((e=>{let[t,r]=e;l.value=t.name||"",d.value=t.about||"",b.setUserInfo(t),E.renderItems(r)})).catch((e=>{console.error("Error fetching user info and cards:",e)}))})),a.addEventListener("click",(()=>{const e=b.getUserInfo();l.value=e.name.trim(),d.value=e.about.trim(),p.open()})),o.addEventListener("click",(()=>{v.open(),k["add-button-form"].resetValidation()})),c.addEventListener("click",(()=>{g.open()}));const k={};(t=>{t.forEach((t=>{const r=new e(i,t);return r.enableValidation(),k[t.getAttribute("id")]=r,k}))})(n)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,