!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._errorList=e.errorList,this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent="",this._errorMessageElement.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return Array.from(this._inputElements).some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._form.reset(),this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}}class t{constructor(e,t,s,r){this._name=e.name,this._link=e.link,this._id=e._id,this._cardSelector=t,this._data=e,this._handleImageClick=s,this._handleDeleteClick=r,this._cardElement=this._getTemplate()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButton()})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}_handleLikeButton(){this._likeButton.classList.toggle("card__like-button-active")}_handleDeleteButton(){this._handleDeleteClick(this._id)}getView(){return this._element=this._cardElement,this._cardImageEl=this._element.querySelector(".card__image"),this._element.setAttribute("data-id",this._id),this._element.querySelector(".card__title").textContent=this._name,this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._setEventListeners(),this._element}}class s{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t),this._closeButton=this._modalElement.querySelector(".modal__close"),this._handleEscapeKey=this._handleEscapeKey.bind(this)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeKey)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeKey)}_handleEscapeKey(e){"Escape"===e.key&&this.close()}_setEventListeners(){this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()})),this._closeButton.addEventListener("click",(()=>{this.close()}))}}class r extends s{constructor(e,t){super({modalSelector:e}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputElements=this._modalForm.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super._setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}class n{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfoAndCards(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}createCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Error updating user info: ${e.status}`)))}}new n({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a44aa497-1b5c-4737-a030-aa953cdc7c47","Content-Type":"application/json"}}).getInitialCards().then((e=>{console.log(e)})).catch((e=>{console.log(e)}));const o=document.querySelectorAll(".modal__form"),i=document.querySelector("#profile__edit-button-js"),a=(document.forms["profile-edit-form"],document.querySelector("#profile__add-button-js")),l={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",errorList:"modal__error"},c=document.querySelector("[name='name']"),d=document.querySelector("[name='about']"),h=new n({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a44aa497-1b5c-4737-a030-aa953cdc7c47","Content-Type":"application/json"}}),_=new class{constructor(e,t){let{items:s,renderer:r}=e;this._renderItems=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._renderItems.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[],renderer:g},".cards__list");h.getInitialCards().then((e=>{_.renderItems(e)})).catch((e=>{console.log(e)}));const m=new r("#profile-edit-modal",(function(e){const t={name:e.name,about:e.about};h.updateUserInfo(t).then((e=>{p.setUserInfo(e),m.close()})).catch((e=>{console.error("Error updating user information:",e)}))}));m.setEventListeners();const u=new r("#add-button-modal",(function(e){const t={name:e.title,link:e.image};h.createCard(t).then((e=>{_.addItem(f(e)),u.close()})).catch((e=>{console.error("Error creating card:",e)}))}));u.setEventListeners();const E=new class extends s{constructor(e){super({modalSelector:e}),this._modalImage=this._modalElement.querySelector(".modal__image"),this._modalImageCaption=this._modalElement.querySelector(".modal__caption")}open(e){this._modalImage.src=e.link,this._modalImage.alt=e.name,this._modalImageCaption.textContent=e.name,super.open()}setEventListeners(){super._setEventListeners(),this._modalImage.addEventListener("submit",(e=>{e.preventDefault()}))}}("#preview-image-modal");E.setEventListeners();const p=new class{constructor(e){let{nameElementSelector:t,aboutElementSelector:s}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s)}getUserInfo(){return this._userInfo={name:this._nameElement.textContent,about:this._aboutElement.textContent},this._userInfo}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._aboutElement.textContent=s}}({nameElementSelector:".profile__title",aboutElementSelector:".profile__description"});function f(e){return new t(e,"#card-template",(()=>{E.open(e)}),v).getView()}function g(e){const t=f(e);_.addItem(t)}function v(e){h.deleteCard(e).then((()=>{const t=document.querySelector(`[data-id='${e}']`);t&&t.remove()})).catch((e=>{console.error("Error deleting card:",e)}))}document.addEventListener("DOMContentLoaded",(()=>{h.getUserInfoAndCards().then((e=>{let[t,s]=e;c.value=t.name||"",d.value=t.about||"",p.setUserInfo(t),s.forEach((e=>g(e)))})).catch((e=>{console.error("Error fetching user info and cards:",e)}))})),i.addEventListener("click",(()=>{const e=p.getUserInfo();c.value=e.name.trim(),d.value=e.about.trim(),m.open()})),a.addEventListener("click",(()=>{u.open(),b["add-button-form"].resetValidation()}));const b={};(t=>{t.forEach((t=>{const s=new e(l,t);return s.enableValidation(),b[t.getAttribute("id")]=s,b}))})(o)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,