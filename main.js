!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._errorList=e.errorList,this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent="",this._errorMessageElement.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return Array.from(this._inputElements).some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._form.reset(),this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}}class t{constructor(e,t,s,r,n,i,o){this._name=e.name,this._link=e.link,this._id=e._id,this._likes=e.likes||[],this._cardSelector=t,this._data=e,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeCard=n,this._handleUnlikeCard=i,this._currentUserId=o,this._cardElement=this._getTemplate()}_getTemplate(){const e=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);return this._likeButton=e.querySelector(".card__like-button"),this._deleteButton=e.querySelector(".card__delete-button"),this._likeCountElement=e.querySelector(".card__like-count"),e}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButton()})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}_handleLikeButton(){this._isLiked()?this._handleUnlikeCard(this._id).then((e=>{this._likes=e.likes,this._updateLikeStatus()})).catch((e=>{console.error(`Error unliking card: ${e}`)})):this._handleLikeCard(this._id).then((e=>{this._likes=e.likes,this._updateLikeStatus()})).catch((e=>{console.error(`Error liking card: ${e}`)}))}_isLiked(){return this._likes.some((e=>e._id===this._currentUserId))}_updateLikeStatus(){const e=this._cardElement.querySelector(".card__like-count");e&&(e.textContent=this._likes.length),this._likeButton?this._isLiked()?this._likeButton.classList.add("card__like-button-active"):this._likeButton.classList.remove("card__like-button-active"):console.error("Like button not found.")}_handleDeleteButton(){this._handleDeleteClick(this._id)}getView(){return this._element=this._cardElement,this._cardImageEl=this._element.querySelector(".card__image"),this._element.setAttribute("data-id",this._id),this._element.querySelector(".card__title").textContent=this._name,this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._updateLikeStatus(),this._setEventListeners(),this._element}}class s{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t),this._closeButton=this._modalElement.querySelector(".modal__close"),this._handleEscapeKey=this._handleEscapeKey.bind(this)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeKey)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeKey)}_handleEscapeKey(e){"Escape"===e.key&&this.close()}_setEventListeners(){this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()})),this._closeButton.addEventListener("click",(()=>{this.close()}))}}class r extends s{constructor(e,t){super({modalSelector:e}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputElements=this._modalForm.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super._setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const n=document.querySelectorAll(".modal__form"),i=document.querySelector("#profile__edit-button-js"),o=(document.forms["profile-edit-form"],document.querySelector("#profile__add-button-js")),a={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",errorList:"modal__error"},l=document.querySelector("[name='name']"),d=document.querySelector("[name='about']"),c=document.querySelector(".profile__avatar"),h=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfoAndCards(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}createCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a44aa497-1b5c-4737-a030-aa953cdc7c47","Content-Type":"application/json"}}),_=new class{constructor(e,t){let{items:s,renderer:r}=e;this._renderItems=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(e){e.reverse().forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[],renderer:function(e){const t=k(e);_.addItem(t)}},".cards__list"),u=new r("#profile-edit-modal",(function(e){const t={name:e.name,about:e.about};h.updateUserInfo(t).then((e=>{v.setUserInfo(e),u.close()})).catch((e=>{console.error("Error updating user information:",e)}))}));u.setEventListeners();const m=new r("#add-button-modal",(function(e){const t={name:e.title,link:e.image,likes:[]};h.createCard(t).then((e=>{_.addItem(k(e)),m.close()})).catch((e=>{console.error("Error creating card:",e)}))}));m.setEventListeners();const E=new class extends s{constructor(e){super({modalSelector:e}),this._modalImage=this._modalElement.querySelector(".modal__image"),this._modalImageCaption=this._modalElement.querySelector(".modal__caption")}open(e){this._modalImage.src=e.link,this._modalImage.alt=e.name,this._modalImageCaption.textContent=e.name,super.open()}setEventListeners(){super._setEventListeners(),this._modalImage.addEventListener("submit",(e=>{e.preventDefault()}))}}("#preview-image-modal");E.setEventListeners();const p=new class extends s{constructor(e,t){super({modalSelector:e}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._inputElement=this._modalForm.querySelector("#avatar-link-input"),this._errorElement=this._modalForm.querySelector("#avatar-link-input-error"),this._handleAvatarImageSubmit=t}setEventListeners(){super._setEventListeners(),document.querySelector(".profile__avatar-button").addEventListener("click",(()=>{console.log("Avatar button clicked"),this.open()})),this._modalForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._inputElement.value.trim();t?(this._handleAvatarImageSubmit({avatar:t}),this.close()):console.error("Avatar URL is required.")}))}}("#avatar-edit-modal",(function(e){const t=e.avatar;t?h.updateUserAvatar(t).then((e=>{console.log("User avatar updated successfully:",e),function(e){c.src=e}(t),p.close()})).catch((e=>{console.error("Error updating user avatar:",e)})):console.error("Avatar URL is required.")}));p.setEventListeners();const v=new class{constructor(e){let{nameElementSelector:t,aboutElementSelector:s}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s)}getUserInfo(){return this._userInfo={name:this._nameElement.textContent,about:this._aboutElement.textContent},this._userInfo}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._aboutElement.textContent=s}getUserId(){return this._userId}}({nameElementSelector:".profile__title",aboutElementSelector:".profile__description"});function k(e){return new t(e,"#card-template",(()=>{E.open(e)}),S,f,b,v.getUserId()).getView()}function f(e){return h.likeCard(e)}function b(e){return h.unlikeCard(e)}function S(e){h.deleteCard(e).then((()=>{const t=document.querySelector(`[data-id='${e}']`);t&&t.remove()})).catch((e=>{console.error("Error deleting card:",e)}))}document.addEventListener("DOMContentLoaded",(()=>{h.getUserInfoAndCards().then((e=>{let[t,s]=e;s=s.map((e=>({...e,likes:e.likes||[]}))),l.value=t.name||"",d.value=t.about||"",v.setUserInfo(t),_.renderItems(s)})).catch((e=>{console.error("Error fetching user info and cards:",e)}))})),i.addEventListener("click",(()=>{const e=v.getUserInfo();l.value=e.name.trim(),d.value=e.about.trim(),u.open()})),o.addEventListener("click",(()=>{m.open(),L["add-button-form"].resetValidation()})),c.addEventListener("click",(()=>{p.open()}));const L={};(t=>{t.forEach((t=>{const s=new e(a,t);return s.enableValidation(),L[t.getAttribute("id")]=s,L}))})(n)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,